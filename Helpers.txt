------------------------------------ Application Ports ------------------------------------
Keycloak                     : http://localhost:4000;
InventoryManagement.API      : http://localhost:4001;
InventoryManagement.Frontend : https://localhost:4002;
EmailService.API             : http://localhost:4004;
------------------------------------ Application Ports ------------------------------------



------------------------------------ Docker container backup/restore ------------------------------------
Powershell : docker login
Backup     : docker cp 0776f15b9409:/var/opt/mssql/data/KeycloakDb_log.ldf C:\Database
Restore    : docker cp "C:/Users/malfx001/Desktop/Yeni Disk/Programlama/Workshop/Enerya/Database/Keycloak/KeycloakDb.mdf" 6b01fe1fee98:/var/opt/mssql/data/
------------------------------------ Docker container backup/restore ------------------------------------



------------------------------------ minikube/Kubernetes Ayarlari ------------------------------------
1-) Choco kullanilarak minikube kur:
    https://community.chocolatey.org/packages/Minikube
	https://dev.to/sanjaybsm/installing-minikube-kubectl-with-chocolatey-windows-5gc7
2-) Hyper-V set
    https://minikube.sigs.k8s.io/docs/drivers/hyperv/
    Set Hyper-V: minikube config set driver hyperv
3-) Hyper-V uzerinde bir tane external01 olustur ve asagidaki komut ile calistir.
    minikube start --vm-driver hyperv --hyperv-virtual-switch "External01"
------------------------------------ minikube/Kubernetes Ayarlari ------------------------------------



------------------------------------ docker-compose.yml to kubernetes ------------------------------------
Docker Compose Dosyalarını Kubernetes YAML Dosyalarına donustur:
- kompose convert -f docker-compose.yml -o kubernetes/

Bu komut, docker-compose.yml dosyasını kubernetes/ dizinine donusturulecektir.

Docker Imajlarını Kubernetes Cluster'a Yukle:
- kubectl apply -f kubernetes/
- minikube tunnel 
------------------------------------ docker-compose.yml to kubernetes ------------------------------------






------------------------------------ Migrations - Persistence Layer ------------------------------------
Migrate: dotnet ef migrations add InitialCreate5 --context ApplicationDbContext
Update : dotnet ef database update --context ApplicationDbContext
Remove : dotnet ef migrations remove --force --context ApplicationDbContext
------------------------------------ Migrations - Persistence Layer ------------------------------------



------------------------------------ Dockerfile - Test Run ------------------------------------
InventoryManagement.Frontend
Command: docker build -t inventory.management-frontend .
Command: docker run -d -p 4004:4004 inventory.management.frontend
Command: docker-compose up --build
------------------------------------ Dockerfile - Test Run ------------------------------------
