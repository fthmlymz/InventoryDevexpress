@using InventoryManagement.Frontend.Constants;
@using InventoryManagement.Frontend.Models;
@using InventoryManagement.Frontend.Services.Authorization;
@using InventoryManagement.Frontend.Services;
@using InventoryManagement.Frontend.Common;

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject ApiService ApiService
@inject IAuthorizationService AuthorizationService
@inject NavigationManager NavigationManager
@inject CommunicationService communicationService

@page "/company-list"

@if (AuthorizationService.HasPermission("res:company", "scopes:read"))
{
    @if (companyModel != null && companyModel.data != null)
    {
        <RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal"
                         Gap="0.5rem"
                         AlignItems="AlignItems.Center"
                         Class="rz-p-4 rz-border-radius-1"
                         Style="border: var(--rz-grid-cell-border);">
                <RadzenButton Text="Filtrele"
                              Click="@(args => CompanyFiltering())"
                              Size="ButtonSize.Small" />
            </RadzenStack>

            <RadzenDataFilter @ref="dataFilter"
                              Data="@companies" TItem="CompanyModel"
                              ViewChanged=@(view => filteredCompanies= view)
                              ApplyFilterText="Uygula"
                              AndOperatorText="ve"
                              OrOperatorText="veya"
                              ClearFilterText="Tümünü temizle"
                              AddFilterText="Filtre ekle"
                              RemoveFilterText="Filtre Sil"
                              AddFilterGroupText="Filtre Grubu Ekle"
                              EqualsText="Eşittir"
                              NotEqualsText="Eşit değil"
                              EndsWithText="ile biter"
                              ContainsText="içerir"
                              DoesNotContainText="içermiyor"
                              StartsWithText="ile başlar"
                              IsNotNullText="null değil"
                              IsNullText="null"
                              IsEmptyText="boş"
                              IsNotEmptyText="boş değil">
                <Properties>

                    <RadzenDataFilterProperty TItem="CompanyModel" Property="Name" Title="Şirket Adı">
                        <FilterTemplate>
                            <RadzenTextBox @bind-Value="@filterValues[nameof(CompanyModel.Name)]" />
                        </FilterTemplate>
                    </RadzenDataFilterProperty>

                    <RadzenDataFilterProperty TItem="CompanyModel" Property="Description" Title="Açıklama">
                        <FilterTemplate>
                            <RadzenTextBox @bind-Value="@filterValues[nameof(CompanyModel.Description)]" />
                        </FilterTemplate>
                    </RadzenDataFilterProperty>

                    <RadzenDataFilterProperty TItem="CompanyModel" Property="CreatedBy" Title="Oluşturan">
                        <FilterTemplate>
                            <RadzenTextBox @bind-Value="@filterValues[nameof(CompanyModel.CreatedBy)]" />
                        </FilterTemplate>
                    </RadzenDataFilterProperty>

                    <RadzenDataFilterProperty TItem="CompanyModel" Property="UpdatedBy" Title="Güncelleyen">
                        <FilterTemplate>
                            <RadzenTextBox @bind-Value="@filterValues[nameof(CompanyModel.UpdatedBy)]" />
                        </FilterTemplate>
                    </RadzenDataFilterProperty>
                </Properties>
            </RadzenDataFilter>
        </RadzenStack>


        @if (AuthorizationService.HasPermission("res:company", "scopes:create"))
        {
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Yeni Şirket" Click="@((args) => InsertRow(new CompanyModel()))" Disabled="@(companyToInsert != null || companyToUpdate != null)" />
        }

        <RadzenDataGrid @ref="companyGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" Page="@Reset" AllowSorting="true"
                        EditMode="DataGridEditMode.Multiple" Data="@companyModel?.data"
                        TItem="CompanyModel" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Filter="@Reset">
            <Columns>
                <RadzenDataGridColumn TItem="CompanyModel" Property="Id" Title="Id" Width="25%" Filterable="false" />

                <RadzenDataGridColumn TItem="CompanyModel" Property="Name" Title="Şirket Adı" Width="100%">
                    <EditTemplate Context="company">
                        <RadzenTextBox @bind-Value="company.Name" style="width: 100%" Name="Name"></RadzenTextBox>
                        <RadzenRequiredValidator style="display: grid" Component="Name" Text="Şirket adı zorunludur" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="CompanyModel" Property="Description" Title="Açıklama" Width="100%">
                    <EditTemplate Context="company">
                        <RadzenTextBox @bind-Value=company.Description style="width: 100%"></RadzenTextBox>
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="CompanyModel" Context="company" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                    <Template Context="company">
                        @if (AuthorizationService.HasPermission("res:company", "scopes:update"))
                        {
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Style="border-radius: 50%;" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(company))" @onclick:stopPropagation="true"></RadzenButton>
                        }
                        @if (AuthorizationService.HasPermission("res:company", "scopes:delete"))
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Style="border-radius: 50%;" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(company))" @onclick:stopPropagation="true"></RadzenButton>
                        }
                        @if (AuthorizationService.HasPermission("res:company", "scopes:create"))
                        {
                            <RadzenButton Icon="line_style" ButtonStyle="ButtonStyle.Light" Style="border-radius: 50%;" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => CompanyDetail(company))" @onclick:stopPropagation="true"></RadzenButton>
                        }
                    </Template>

                    <EditTemplate Context="company">
                        @if (AuthorizationService.HasPermission("res:company", "scopes:update"))
                        {
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Style="border-radius: 50%;" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(company))"></RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Style="border-radius: 50%;" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(company))"></RadzenButton>
                        }

                        @if (AuthorizationService.HasPermission("res:company", "scopes:delete"))
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Style="border-radius: 50%;" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(company))"></RadzenButton>
                        }
                    </EditTemplate>

                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

        <RadzenPager HorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" Count="@companyModel.totalCount"
                     PageSize="@companyModel.pageSize" PageNumbersCount="4" PageChanged="@ChangePage" PageSizeOptions="@pageSizeOptions" PageSizeText="sayfa başına"
                     PageSizeChanged="@(args => PageSizeOptionsChanged(args))" />
    }
    else
    {
        <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
}




@code {
    private PaginatedResult<CompanyModel>? companyModel;
    private RadzenDataGrid<CompanyModel>? companyGrid;
    private Dictionary<int, CompanyModel> originalCompanyDataList = new Dictionary<int, CompanyModel>(); //DataGrid row cache
    private List<CompanyModel> companiesToUpdate = new List<CompanyModel>();
    private CompanyModel? companyToInsert;
    private CompanyModel? companyToUpdate;
    private int pageNumber = 1;
    private int pageSize = 10;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadCompanyData(pageNumber, pageSize);
    }

    void Reset()
    {
        companyToInsert = null;
        companyToUpdate = null;
    }


    #region Filtering Company
    RadzenDataFilter<CompanyModel>? dataFilter;
    IQueryable<CompanyModel>? filteredCompanies;
    IQueryable<CompanyModel>? companies;
    Dictionary<string, string> filterValues = typeof(CompanyModel).GetProperties().ToDictionary(p => p.Name, _ => string.Empty);

    void CompanyFiltering()
    {
        FilteringParameters filtreleme = new FilteringParameters();
        foreach (var property in typeof(FilteringParameters).GetProperties())
        {
            if (filterValues.ContainsKey(property.Name))
            {
                property.SetValue(filtreleme, filterValues[property.Name]);
            }
        }
        pageNumber = 1;
        pageSize = 10;
        CompanyFiltering(pageNumber, pageSize, filtreleme);
    }

    async void CompanyFiltering(int pageNumber, int pageSize, FilteringParameters filtreleme)
    {
        var parameters = new Dictionary<string, string>
        {
        { "PageNumber", pageNumber.ToString() },
        { "PageSize", pageSize.ToString() }
        };
        var propertyInfos = filtreleme.GetType().GetProperties();
        foreach (var propertyInfo in propertyInfos)
        {
            var value = propertyInfo.GetValue(filtreleme)?.ToString();
            if (!string.IsNullOrEmpty(value))
            {
                parameters.Add(propertyInfo.Name, value);
            }
        }
        var filteredParameters = parameters.Select(p => $"{p.Key}={p.Value}");
        var url = $"{ApiEndpointConstants.CompanySearch}?{string.Join("&", filteredParameters)}";

        var companyModelTask = ApiService.GetAsync<PaginatedResult<CompanyModel>>(url);
        await companyModelTask.ContinueWith(task =>
        {
            if (task.IsFaulted)
            {
                var exception = task.Exception?.InnerException;
                //Burada eğer kullanıcı 403 yetkisi alıyorsa ana sayfaya yönlendirilecek
                NotificationService.Notify(NotificationSeverity.Error, "Bağlantı hatası", $"API sunucusuna bağlanılamıyor {exception?.Message}", duration: 6000);
            }
            else
            {
                companyModel = task.Result;
            }
            StateHasChanged();
        });
    }
    #endregion


    #region Pagination
    string pagingSummaryFormat = "Gösterilen sayfa {0} - {1} (toplam {2} kayıt)";
    IEnumerable<int> pageSizeOptions = new int[] { 5, 10, 20, 30, 50, 100, 500, 1000, 5000 };
    async void ChangePage(PagerEventArgs args)
    {
        pageNumber = args.PageIndex + 1;
        pageSize = companyModel.pageSize;

        await LoadCompanyData(pageNumber, pageSize);
        StateHasChanged();
    }
    void PageSizeOptionsChanged(int pageSize)
    {
        companyModel.pageSize = pageSize;
        ChangePage(new PagerEventArgs() { PageIndex = companyGrid.CurrentPage });
    }
    #endregion

    async void LoadData(LoadDataArgs args)
    {
        pageNumber = args.Skip.Value / args.Top.Value + 1;
        pageSize = args.Top.Value;
        await LoadCompanyData(pageNumber, pageSize);

        companyGrid.CurrentPage = pageNumber - 1;

        StateHasChanged();
    }
    private async Task LoadCompanyData(int pageNumber, int pageSize)
    {
        var companyModelTask = ApiService.GetAsync<PaginatedResult<CompanyModel>>($"{ApiEndpointConstants.CompanySearch}?PageNumber={pageNumber}&PageSize={pageSize}");
        await companyModelTask.ContinueWith(task =>
        {
            if (task.IsFaulted)
            {
                var exception = task.Exception?.InnerException;
                NotificationService.Notify(NotificationSeverity.Error, "Bağlantı hatası", $"İstek gerçekleştirilemedi {exception?.Message}", duration: 6000);
            }
            else
            {
                companyModel = task.Result;
            }
            StateHasChanged();
        });
    }



    #region Datatable
    async Task EditRow(CompanyModel company)
    {
        originalCompanyDataList[company.Id] = company.Clone();
        companiesToUpdate.Add(company);

        Task editRowTask = companyGrid.EditRow(company);
        Task reloadTask = companyGrid.Reload();

        await Task.WhenAll(editRowTask, reloadTask);
        StateHasChanged();
    }
    async Task CompanyDetail(CompanyModel company)
    {
        await communicationService.SendCompany(company);
        NavigationManager.NavigateTo("/company/company-details");
    }
    async void OnUpdateRow(CompanyModel company)
    {
        if (company == companyToInsert)
        {
            companyToInsert = null;
        }
        companyToUpdate = null;
        var updatedcompany = await ApiService.PutAsync(ApiEndpointConstants.CompanyGetPostPutDelete, company);
        if (updatedcompany.IsSuccessStatusCode)
        {
            NotificationService.Notify(NotificationSeverity.Success, "Başarılı", $"{company.Name} isimli şirket güncellendi");
        }
        StateHasChanged();
    }
    async Task SaveRow(CompanyModel company)
    {
        if (companyGrid != null)
        {
            await companyGrid.UpdateRow(company);
        }
    }
    void CancelEdit(CompanyModel company)
    {
        if (company == companyToInsert)
        {
            companyToInsert = null;
        }
        else if (companiesToUpdate.Contains(company))
        {
            if (originalCompanyDataList.TryGetValue(company.Id, out var originalCompany))
            {
                company.SetPropertiesFromJson(originalCompany);
            }
            companiesToUpdate.Remove(company);
        }
        companyGrid.CancelEditRow(company);
        companyGrid.Reload();
        StateHasChanged();
    }
    async Task DeleteRow(CompanyModel company)
    {
        if (company == companyToInsert)
        {
            companyToInsert = null;
        }
        else if (company == companyToUpdate)
        {
            companyToUpdate = null;
        }
        if (companyModel.data.Contains(company))
        {
            companyModel.data.Remove(company);
            companyModel.totalCount--;
            //await companyGrid.Reload();
        }

        bool? confirmed = await DialogService.Confirm($"<b>{company.Name}</b> isimli şirketin silinme işlemini onaylıyor musunuz?\n" +
                                                      $"<br><li>Envantere bağlı tüm kayıtlar,\n" +
                                                      $"<br><li> Kategori ve alt kategoriler silinecek",
                                                       "Silme Onayı");
        if (confirmed == true)
        {
            var response = await ApiService.DeleteAsync(ApiEndpointConstants.CompanyGetPostPutDelete, company.Id);
            if (response.IsSuccessStatusCode)
            {
                await companyGrid.Reload();
                NotificationService.Notify(NotificationSeverity.Success, "Başarılı", $"Silme isteği gerçekleşti.");
            }
        }
    }


    async Task InsertRow(CompanyModel company)
    {
        companyToInsert = company;
        await companyGrid.InsertRow(companyToInsert);
        StateHasChanged();
    }
    async void OnCreateRow(CompanyModel company)
    {
        var insertedCompany = await ApiService.PostAsync(ApiEndpointConstants.CompanyGetPostPutDelete, company);

        if (insertedCompany.IsSuccessStatusCode)
        {
            var insertedCompanyModel = await insertedCompany.Content.ReadFromJsonAsync<CompanyModel>();
            companyModel.data?.Add(insertedCompanyModel);
            companyModel.totalCount++;
        }

        companyToInsert = null;
        await companyGrid.Reload();
        StateHasChanged();
    }
    #endregion
}
