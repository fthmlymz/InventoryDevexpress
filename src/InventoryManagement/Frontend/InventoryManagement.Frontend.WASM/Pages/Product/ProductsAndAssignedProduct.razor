@page "/product/product-and-assigned"
@using InventoryManagement.Frontend.Constants;
@using InventoryManagement.Frontend.Models;
@using InventoryManagement.Frontend.Services;
@using InventoryManagement.Frontend.Services.Authorization;
@using InventoryManagement.Frontend.Common;


@inject ApiService ApiService
@inject NotificationService NotificationService
@inject IAuthorizationService AuthorizationService
@inject ContextMenuService ContextMenuService
@inject CommunicationService communicationService
@inject NavigationManager NavigationManager




@if (AuthorizationService.HasPermission("res:product", "scopes:read"))
{
    @if (productAndAssignedModel != null && productAndAssignedModel.data != null)
    {
        <div class="rz-shadow-6">
            <RadzenDataGrid @ref="productGrid"
                            AllowFiltering="true"
            @bind-Value=@selectedProductAndAssignedProduct
                            AllowPaging="true"
                            AllowSorting="true"
                            Data="@productAndAssignedModel?.data"
                            TItem="GetProductWithPaginationDto"
                            CellContextMenu="@OnCellContextMenu"
                            SelectionMode="DataGridSelectionMode.Single"
                            FilterPopupRenderMode="PopupRenderMode.OnDemand">
                <Columns>
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="Id" Title="Id" Width="15%" Filterable="false" />

                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="Name" Title="Ürün Adı" Width="25%" Filterable="false" />
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="Barcode" Title="Barkod" Width="25%" Filterable="false" />
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="Status" Title="Durum" Width="25%" Filterable="false" />
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="SerialNumber" Title="Seri No" Width="25%" Filterable="false" />
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="Imei" Title="Imei" Width="25%" Filterable="false" />
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="Mac" Title="Mac" Width="25%" Filterable="false" />
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="CompanyName" Title="Şirket Adı" Width="25%" Filterable="false" />
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="AssignedUserName" Title="Zimmetlenen Kullanıcı" Width="25%" Filterable="false" />
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="AssignedUserId" Title="Zimmetlenen Kullanıcı Id" Width="25%" Filterable="false" Visible="false" />


                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="CategoryId" Title="Kategori Id" Width="25%" Filterable="false" Visible="false" />
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="CategoryName" Title="Kategori Adı" Width="25%" Filterable="false" />
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="CategorySubId" Title="Kategori Sub Id" Width="25%" Filterable="false" Visible="false" />
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="CategorySubName" Title="Kategori Sub Adı" Width="25%" Filterable="false" />
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="BrandId" Title="Marka Id" Width="25%" Filterable="false" Visible="false" />
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="BrandName" Title="Brand Adı" Width="25%" Filterable="false" />
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="ModelId" Title="Model Id" Width="25%" Filterable="false" Visible="false" />
                    <RadzenDataGridColumn TItem="GetProductWithPaginationDto" Property="ModelName" Title="Model Adı" Width="25%" Filterable="false" />

                </Columns>
            </RadzenDataGrid>
            <RadzenPager HorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" Count="@productAndAssignedModel.totalCount"
                         PageSize="@productAndAssignedModel.pageSize" PageNumbersCount="4" PageChanged="@ChangePage" PageSizeOptions="@pageSizeOptions" PageSizeText="sayfa başına"
                         PageSizeChanged="@(args => PageSizeOptionsChanged(args))" />
        </div>
    }
    else
    {
        <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
}



@code {
    private PaginatedResult<GetProductWithPaginationDto>? productAndAssignedModel;
    private Dictionary<int, GetProductWithPaginationDto> originalProductAndAssignedDataList = new Dictionary<int, GetProductWithPaginationDto>();
    private List<GetProductWithPaginationDto> assignedProductToUpdate = new List<GetProductWithPaginationDto>();
    IList<GetProductWithPaginationDto>? selectedProductAndAssignedProduct;



    #region Pagination
    private int pageNumber = 1;
    private int pageSize = 10;
    private RadzenDataGrid<GetProductWithPaginationDto>? productGrid;
    string pagingSummaryFormat = "Gösterilen sayfa {0} - {1} (toplam {2} kayıt)";
    IEnumerable<int> pageSizeOptions = new int[] { 5, 10, 20, 30, 50, 100, 500, 1000, 5000 };
    async void ChangePage(PagerEventArgs args)
    {
        pageNumber = args.PageIndex + 1;
        pageSize = productAndAssignedModel.pageSize;

        await LoadProductsAndAssignedProduct(pageNumber, pageSize);
        StateHasChanged();
    }
    void PageSizeOptionsChanged(int pageSize)
    {
        productAndAssignedModel.pageSize = pageSize;
        ChangePage(new PagerEventArgs() { PageIndex = productGrid.CurrentPage });
    }
    #endregion




    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAndAssignedProduct(pageNumber, pageSize);
    }


    private async Task LoadProductsAndAssignedProduct(int pageNumber, int pageSize)
    {
        try
        {
            productAndAssignedModel = await ApiService.GetAsync<PaginatedResult<GetProductWithPaginationDto>>($"{ApiEndpointConstants.ProductGetPostPutDelete}?PageNumber={pageNumber}&PageSize={pageSize}");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Bağlantı hatası", $"İstek gerçekleştirilemedi {ex.Message}", duration: 6000);
        }
    }


    void OnCellContextMenu(DataGridCellMouseEventArgs<GetProductWithPaginationDto> args)
    {
        selectedProductAndAssignedProduct = new List<GetProductWithPaginationDto>() { args.Data };

        var contextMenuItems = new List<ContextMenuItem>();

        if (AuthorizationService.HasPermission("res:assignedproduct", "scopes:create"))
        {
            contextMenuItems.Add(new ContextMenuItem() { Text = "Zimmetle", Value = 1, Icon = "person" });
            contextMenuItems.Add(new ContextMenuItem() { Text = "Teslim Al", Value = 2, Icon = "warehouse" });
            contextMenuItems.Add(new ContextMenuItem() { Text = "Ürünü Transfer Et", Value = 3, Icon = "local_shipping" });
        }
        if (AuthorizationService.HasPermission("res:assignedproduct", "scopes:read"))
        {
            contextMenuItems.Add(new ContextMenuItem() { Text = "Ürün Detayları", Value = 4, Icon = "info" });
        }


        ContextMenuService.Open(args, contextMenuItems,
        async (e) =>
        {
            if (e.Value.ToString() == "1" && AuthorizationService.HasPermission("res:assignedcreate", "scopes:create"))
            {
                // Zimmetle işlemi
                Console.WriteLine("Zimmetle");
                //await ShowInlineDialog();
            }
            else if (e.Value.ToString() == "2")
            {
                Console.WriteLine("Teslim al");
            }
            else if (e.Value.ToString() == "3")
            {
                Console.WriteLine("transfer et");
            }
            else if (e.Value.ToString() == "4")
            {
                // args.Data.CategoryName = categoryName;
                // args.Data.CategorySubName = categorySubName;
                // args.Data.BrandName = brandName;
                //args.Data.SubModelName = subModelName;
                await communicationService.SendProductId(args.Data.Id);
                NavigationManager.NavigateTo("/product/product-and-assigned-details");
            }
        });
    }
}
