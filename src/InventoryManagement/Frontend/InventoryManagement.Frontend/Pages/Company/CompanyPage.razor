@page "/company-list"

@using InventoryManagement.Frontend.Constants;
@using InventoryManagement.Frontend.DTOs;
@using InventoryManagement.Frontend.DTOs.Company
@using InventoryManagement.Frontend.Services.Authorization;
@using InventoryManagement.Frontend.Services;
@using InventoryManagement.Frontend.Common;




@inherits ComponentBase

@if (_authorizationService.HasPermission("res:company", "scopes:read"))
{
    @if (companyModel != null && companyModel.data != null)
    {
        <RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal"
                         Gap="0.5rem"
                         AlignItems="AlignItems.Center"
                         Class="rz-p-4 rz-border-radius-1"
                         Style="border: var(--rz-grid-cell-border);">
                <RadzenButton Text="Filtrele"
                              Click="@(args => CompanyFiltering())"
                              Size="ButtonSize.Small" />
            </RadzenStack>

            <RadzenDataFilter @ref="dataFilter"
                              Data="@companies" TItem="CompanyModel"
                              ViewChanged=@(view => filteredCompanies= view)
                              ApplyFilterText="Uygula"
                              AndOperatorText="ve"
                              OrOperatorText="veya"
                              ClearFilterText="Tümünü temizle"
                              AddFilterText="Filtre ekle"
                              RemoveFilterText="Filtre Sil"
                              AddFilterGroupText="Filtre Grubu Ekle"
                              EqualsText="Eşittir"
                              NotEqualsText="Eşit değil"
                              EndsWithText="ile biter"
                              ContainsText="içerir"
                              DoesNotContainText="içermiyor"
                              StartsWithText="ile başlar"
                              IsNotNullText="null değil"
                              IsNullText="null"
                              IsEmptyText="boş"
                              IsNotEmptyText="boş değil">
                <Properties>

                    <RadzenDataFilterProperty TItem="CompanyModel" Property="Name" Title="Şirket Adı">
                        <FilterTemplate>
                            <RadzenTextBox @bind-Value="@filterValues[nameof(CompanyModel.Name)]" />
                        </FilterTemplate>
                    </RadzenDataFilterProperty>

                    <RadzenDataFilterProperty TItem="CompanyModel" Property="Description" Title="Açıklama">
                        <FilterTemplate>
                            <RadzenTextBox @bind-Value="@filterValues[nameof(CompanyModel.Description)]" />
                        </FilterTemplate>
                    </RadzenDataFilterProperty>

                    <RadzenDataFilterProperty TItem="CompanyModel" Property="CreatedBy" Title="Oluşturan">
                        <FilterTemplate>
                            <RadzenTextBox @bind-Value="@filterValues[nameof(CompanyModel.CreatedBy)]" />
                        </FilterTemplate>
                    </RadzenDataFilterProperty>

                    <RadzenDataFilterProperty TItem="CompanyModel" Property="UpdatedBy" Title="Güncelleyen">
                        <FilterTemplate>
                            <RadzenTextBox @bind-Value="@filterValues[nameof(CompanyModel.UpdatedBy)]" />
                        </FilterTemplate>
                    </RadzenDataFilterProperty>
                </Properties>
            </RadzenDataFilter>
        </RadzenStack>


        @if (_authorizationService.HasPermission("res:company", "scopes:create"))
        {
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Yeni Şirket" Click="@((args) => InsertRow(new CompanyModel()))" Disabled="@(companyToInsert != null || companyToUpdate != null)" />
        }

        <RadzenDataGrid @ref="companyGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" Page="@Reset" AllowSorting="true"
                        EditMode="DataGridEditMode.Multiple" Data="@companyModel?.data"
                        TItem="CompanyModel" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Filter="@Reset">
            <Columns>
                <RadzenDataGridColumn TItem="CompanyModel" Property="Id" Title="Id" Width="25%" Filterable="false" />

                <RadzenDataGridColumn TItem="CompanyModel" Property="Name" Title="Şirket Adı" Width="100%">
                    <EditTemplate Context="company">
                        <RadzenTextBox @bind-Value="company.Name" style="width: 100%" Name="Name"></RadzenTextBox>
                        <RadzenRequiredValidator style="display: grid" Component="Name" Text="Şirket adı zorunludur" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="CompanyModel" Property="Description" Title="Açıklama" Width="100%">
                    <EditTemplate Context="company">
                        <RadzenTextBox @bind-Value=company.Description style="width: 100%"></RadzenTextBox>
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="CompanyModel" Context="company" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                    <Template Context="company">
                        @if (_authorizationService.HasPermission("res:company", "scopes:update"))
                        {
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Style="border-radius: 50%;" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(company))" @onclick:stopPropagation="true"></RadzenButton>
                        }
                        @if (_authorizationService.HasPermission("res:company", "scopes:delete"))
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Style="border-radius: 50%;" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(company))" @onclick:stopPropagation="true"></RadzenButton>
                        }
                        @if (_authorizationService.HasPermission("res:company", "scopes:create"))
                        {
                            <RadzenButton Icon="line_style" ButtonStyle="ButtonStyle.Light" Style="border-radius: 50%;" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => CompanyDetail(company))" @onclick:stopPropagation="true"></RadzenButton>
                        }
                    </Template>

                    <EditTemplate Context="company">
                        @if (_authorizationService.HasPermission("res:company", "scopes:update"))
                        {
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Style="border-radius: 50%;" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(company))"></RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Style="border-radius: 50%;" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(company))"></RadzenButton>
                        }

                        @if (_authorizationService.HasPermission("res:company", "scopes:delete"))
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Style="border-radius: 50%;" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(company))"></RadzenButton>
                        }
                    </EditTemplate>

                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

        <RadzenPager HorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" Count="@companyModel.totalCount"
                     PageSize="@companyModel.pageSize" PageNumbersCount="4" PageChanged="@ChangePage" PageSizeOptions="@pageSizeOptions" PageSizeText="sayfa başına"
                     PageSizeChanged="@(args => PageSizeOptionsChanged(args))" />
    }
    else
    {
        <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
}

