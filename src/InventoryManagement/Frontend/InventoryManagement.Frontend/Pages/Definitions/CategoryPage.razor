@page "/definitions/category-list"

@using DevExpress.Blazor
@using InventoryManagement.Frontend.Constants;
@using InventoryManagement.Frontend.DTOs.Category



@if (categoryModel != null && categoryModel.data != null)
{
    @if (AuthorizationService.HasPermission("res:category", "scopes:read"))
    {
        <DxGrid @ref="GridCategory"
                Data="categoryModel?.data"
                PageSize="12"
                ColumnResizeMode="GridColumnResizeMode.NextColumn"
                ValidationEnabled="true"
                AutoCollapseDetailRow="true"
                CustomizeEditModel="GridCategory_CustomizeEditModel"
                EditModelSaving="GridCategory_EditModelSaving"
                EditMode="GridEditMode.EditRow"
                EditorRenderMode="GridEditorRenderMode.Integrated">
            <Columns>
                <DxGridDataColumn FieldName="Name" SortIndex="0" Caption="Kategori Adı" />
                <DxGridCommandColumn Width="190px">
                    <HeaderTemplate>
                        @if (AuthorizationService.HasPermission("res:category", "scopes:create"))
                        {
                            <RadzenButton Icon="add" ButtonStyle="ButtonStyle.Secondary" Style="border-radius: 50%;" Shade="Shade.Lighter" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="() => GridCategory.StartEditNewRowAsync()" />
                        }
                    </HeaderTemplate>
                    <CellDisplayTemplate>
                        @{
                            @if (AuthorizationService.HasPermission("res:category", "scopes:update"))
                            {
                                <DxButton Click="() => GridCategory.StartEditDataItemAsync(context.DataItem)" Text="Düzenle" RenderStyle="ButtonRenderStyle.Link" />
                            }
                            @if (AuthorizationService.HasPermission("res:category", "scopes:delete"))
                            {
                                <DxButton Click="() => DeleteCategoryDialog((CategoryDto)context.DataItem)" Text="Sil" RenderStyle="ButtonRenderStyle.Link" />
                            }
                        }
                    </CellDisplayTemplate>
                    <CellEditTemplate>
                        @if (AuthorizationService.HasPermission("res:category", "scopes:create"))
                        {
                            <DxButton Click="() => GridCategory.SaveChangesAsync()" Text="Kaydet" RenderStyle="ButtonRenderStyle.Link" />
                            <DxButton Click="() => GridCategory.CancelEditAsync()" Text="İptal Et" RenderStyle="ButtonRenderStyle.Link" />
                        }
                    </CellEditTemplate>
                </DxGridCommandColumn>
            </Columns>


            <DetailRowTemplate Context="detailItem">
                @{
                    var category = (CategoryDto)detailItem.DataItem;
                    <div class="rz-shadow-8" style="width: 100%; height: 100%">
                        <RadzenCard class="rz-p-3" style="width: 100%; height: 100%">
                            <DxGrid @ref="GridCategorySub"
                                    Data="@category.CategorySubs"
                                    ColumnResizeMode="GridColumnResizeMode.NextColumn"
                                    ValidationEnabled="true"
                                    AutoCollapseDetailRow="true"
                                    CustomizeEditModel="GridCategorySub_CustomizeEditModel"
                                    EditModelSaving="GridCategorySub_EditModelSaving"
                                    EditMode="GridEditMode.EditRow"
                                    EditorRenderMode="GridEditorRenderMode.Integrated">
                                <Columns>
                                    <DxGridDataColumn FieldName="Name" Caption="Alt Kategori Adı" />
                                    <DxGridCommandColumn Width="190px">
                                        <HeaderTemplate>
                                            @if (AuthorizationService.HasPermission("res:category", "scopes:create"))
                                            {
                                                <RadzenButton Click="() => {SelectedCategory= category; GridCategorySub.StartEditNewRowAsync();}" Icon="add" ButtonStyle="ButtonStyle.Secondary" Style="border-radius: 50%;" Shade="Shade.Lighter" Variant="Variant.Flat" Size="ButtonSize.Medium" />
                                            }
                                        </HeaderTemplate>
                                        <CellDisplayTemplate>
                                            @{
                                                @if (AuthorizationService.HasPermission("res:category", "scopes:update"))
                                                {

                                                    <DxButton Click="() => GridCategorySub.StartEditDataItemAsync(context.DataItem)" Text="Düzenle" RenderStyle="ButtonRenderStyle.Link" />
                                                }
                                                @if (AuthorizationService.HasPermission("res:category", "scopes:delete"))
                                                {
                                                    <DxButton Click="() => DeleteCategorySubDialog((CategorySubDto)context.DataItem)" Text="Sil" RenderStyle="ButtonRenderStyle.Link" />
                                                }
                                            }
                                        </CellDisplayTemplate>
                                        <CellEditTemplate>
                                            @if (AuthorizationService.HasPermission("res:category", "scopes:create"))
                                            {
                                                <DxButton Click="() => GridCategorySub.SaveChangesAsync()" Text="Kaydet" RenderStyle="ButtonRenderStyle.Link" />
                                                <DxButton Click="() => GridCategorySub.CancelEditAsync()" Text="İptal Et" RenderStyle="ButtonRenderStyle.Link" />
                                            }
                                        </CellEditTemplate>
                                    </DxGridCommandColumn>
                                </Columns>

                            </DxGrid>
                        </RadzenCard>
                    </div>
                }
            </DetailRowTemplate>

        </DxGrid>

        <DxPager PageCount="@categoryModel.totalPages"
                 AutoHideNavButtons="false"
                 SwitchToInputBoxButtonCount="3"
                 ActivePageIndexChanged="HandleCategoryPageNumberChanged" />
    }
}
else
{
    <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}


@code {
    public async Task DeleteCategoryDialog(CategoryDto category)
    {
        var result = await DialogService.OpenAsync("Kategori Sil", ds =>
    @<RadzenStack Gap="1.5rem">
        <p>Kategori : <b>@category.Name</b>isimli kategori ve buna bağlı alt kategorilerde silinecek !</p>
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.End">
                <RadzenButton Text="İptal" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                <RadzenButton Text="Sil" Click="async() => { ds.Close(true); DialogService.Dispose(); await DeleteCategory(category); }" ButtonStyle="ButtonStyle.Danger" Style="width: 80px;" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    );
    }
    public async Task DeleteCategorySubDialog(CategorySubDto category)
    {
        var result = await DialogService.OpenAsync("Alt Kategori Sil", ds =>
    @<RadzenStack Gap="1.5rem">
        <p>Kategori : <b>@category.Name</b>isimli alt kategori silinecek !</p>
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.End">
                <RadzenButton Text="İptal" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                <RadzenButton Text="Sil" Click="async() => { ds.Close(true); DialogService.Dispose(); await DeleteCategorySub(category); }" ButtonStyle="ButtonStyle.Danger" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    );
    }
}