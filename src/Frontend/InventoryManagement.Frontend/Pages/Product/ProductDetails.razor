@page "/product/product-details"
@using DevExpress.Blazor
@using InventoryManagement.Frontend.DTOs.Keycloak
@using InventoryManagement.Frontend.DTOs.Product
@using InventoryManagement.Frontend.DTOs.TransferOfficier
@using InventoryManagement.Frontend.Services.Authorization
@using SharedLibrary.Common


@inherits ComponentBase


<RadzenRow>
    @foreach (var product in productDetails?.data ?? new List<GetByIdProductAndDetailsDto>())
    {
        var transferOptions = productDetails?.data?.SelectMany(product => product?.ProductTransfers)?.ToList();

        bool isTransferInProgress = product?.Status?.Contains(GenericConstantDefinitions.Transfer) == true;
        bool isTransferReturned = product?.Status?.Contains(GenericConstantDefinitions.ReturnIt) == true;
        bool isTransferRejected = product?.Status?.Contains(GenericConstantDefinitions.Rejected) == true;
        bool currentUserIsSender = transferOptions?.Any(transfer => transfer?.SenderUserName == ((KeycloakAuthenticationStateProvider)AuthenticationStateProvider)?.UserInfo?.PreferredUsername) == true;
        bool currentUserIsRecipient = transferOptions?.Any(transfer => transfer?.RecipientUserName == ((KeycloakAuthenticationStateProvider)AuthenticationStateProvider)?.UserInfo?.PreferredUsername) == true;


        <RadzenColumn>
            <div class="rz-shadow-8">
                <RadzenCard class="rz-p-4" style="width: 100%; height: 100%">

                    <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="Radzen.JustifyContent.Start" Gap="1rem">
                        <RadzenImage Style="width: 100px; height: 100px; border-radius: 50%;" />
                        <RadzenStack Gap="0">
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Kullanıcı Bilgisi</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@productDetails?.data?.FirstOrDefault()?.AssignedProducts?.FirstOrDefault()?.FullName</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Şirket</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@SelectedProduct?.CompanyName</b></RadzenText>
                        </RadzenStack>
                    </RadzenStack>


                    <DxFormLayout CssClass="w-100" SizeMode="SizeMode.Small">
                        <DxFormLayoutGroup Caption="Ürün Bilgisi" ColSpanMd="12">
                            <DxFormLayoutItem Caption="Ürün"><DxTextBox ReadOnly="true" Text="@SelectedProduct?.Name" /></DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Barkod"><DxTextBox ReadOnly="true" Text="@SelectedProduct?.Barcode.ToString()" /></DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Seri No"><DxTextBox ReadOnly="true" Text="@SelectedProduct?.SerialNumber" /></DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Mac"><DxTextBox ReadOnly="true" Text="@SelectedProduct?.Mac" /></DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Marka"><DxTextBox ReadOnly="true" Text="@SelectedProduct?.BrandName" /></DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Model"><DxTextBox ReadOnly="true" Text="@SelectedProduct?.ModelName" /></DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Kategori"><DxTextBox ReadOnly="true" Text="@SelectedProduct?.CategoryName" /></DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Alt Kategori"><DxTextBox ReadOnly="true" Text="@SelectedProduct?.CategorySubName" /></DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Imei"><DxTextBox ReadOnly="true" Text="@SelectedProduct?.Imei" /></DxFormLayoutItem>
                        </DxFormLayoutGroup>
                    </DxFormLayout>

                    <hr />
                    <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0">
                        @if (!isTransferInProgress && !isTransferReturned && !isTransferRejected)
                        {

                            @if (product?.Status == GenericConstantDefinitions.Embezzled && (product?.AssignedProducts?.Count ?? 0) > 0)
                            {
                                bool approvalStatusFound = false;

                                foreach (var res in product.AssignedProducts)
                                {
                                    if (res.ApprovalStatus == GenericConstantDefinitions.Accepted || res.ApprovalStatus == GenericConstantDefinitions.Rejected)
                                    {
                                        approvalStatusFound = true;
                                        break;
                                    }
                                }

                                if (!approvalStatusFound)
                                {
                                    if (((KeycloakAuthenticationStateProvider)AuthenticationStateProvider)?.UserInfo?.PreferredUsername == productDetails?.data?.FirstOrDefault()?.AssignedProducts?.FirstOrDefault()?.AssignedUserName)
                                    {
                                        if (approveRejectDto?.ApprovalStatus == null)
                                        {
                                            <RadzenButton Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Danger" class="rz-text-secondary-color" Text="İade Et" Click="@(() => { Task.Run(() => ProductApproveReject("Rejected")); })" />
                                            <RadzenButton Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Success" Text="Teslim Al" Click="@(() => { Task.Run(() => ProductApproveReject("Accepted")); })" />
                                        }
                                    }
                                }
                            }
                            else
                            {
                            }
                        }

                    </RadzenStack>

                </RadzenCard>
            </div>
        </RadzenColumn>

        <RadzenColumn>
            <div class="rz-shadow-8" style="width: 100%; height: 100%">
                <RadzenCard class="rz-p-3" style="width: 100%; height: 100%">
                    <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="Radzen.JustifyContent.End" Gap="1">
                    </RadzenStack>

                    <DxToolbar DropDownDisplayMode="DropDownDisplayMode.DropDown">
                        <DxToolbarItem Text="Ürün İşlemleri" BeginGroup="true" SplitDropDownButton="true" Alignment="ToolbarItemAlignment.Right">
                            <Items>
                                @if (AuthorizationService!.HasPermission("res:assignedproduct", "scopes:update"))
                                {
                                    @if (SelectedProduct?.Status == GenericConstantDefinitions.Embezzled)
                                    {
                                        <DxToolbarItem Text="Zimmet Formu Yazdır" Click="@(() => ShowAssignedFormVisible = true)" />
                                    }
                                    @if (SelectedProduct?.Status == GenericConstantDefinitions.InStock)
                                    {
                                        <DxToolbarItem Text="Zimmetle" Click="@(() => ShowUsersVisible = true)" />
                                    }
                                    @if (SelectedProduct?.Status == GenericConstantDefinitions.Embezzled)
                                    {
                                        <DxToolbarItem Text="Depoya Al" Click="@(() => ShowGetStoreVisible = true)" />
                                    }
                                    @if (SelectedProduct?.Status == GenericConstantDefinitions.InStock)
                                    {
                                        <DxToolbarItem Text="Transfer Et" Click="@(() => { Task.Run(() => ProductTransferGetList()); ShowTransferListVisible = true; })" />
                                    }
                                }
                            </Items>
                        </DxToolbarItem>
                    </DxToolbar>

                    <hr />

                    @if (product?.Status == null)
                    {
                        <div class="alert alert-warning" role="alert"> Ürünün durum bilgisi boş olamaz veritabanından düzeltilmesi gerekli </div>
                    }
                    else if (product?.Status != GenericConstantDefinitions.InStock && product?.Status != GenericConstantDefinitions.Embezzled)
                    {
                        <RadzenStack Orientation="Radzen.Orientation.Horizontal"
                                     AlignItems="AlignItems.Center"
                                     Gap="0.5rem"
                                     Class="rz-p-4 rz-mb-6 rz-border-radius-1"
                                     Style="border: var(--rz-grid-cell-border); width: 100%">

                            <div style="flex: 1;">Durumu : <strong>@SelectedProduct?.Status</strong></div>

                            @if (AuthorizationService!.HasPermission("res:product", "scopes:update"))
                            {
                                @if (transferOptions != null && transferOptions.Count > 0)
                                {
                                    <RadzenSelectBar TValue="int" class="mb-5">
                                        <Items>
                                            @if (isTransferReturned || isTransferRejected)
                                            {
                                                @if (currentUserIsSender)
                                                {
                                                    <RadzenSelectBarItem Text="Kabul Et" Value="GenericConstantDefinitions.Accepted" @onclick="() => ProductTransfer(GenericConstantDefinitions.Accepted)" />
                                                }
                                                return;
                                            }
                                            else if (isTransferInProgress)
                                            {
                                                @if (currentUserIsRecipient)
                                                {
                                                    <RadzenSelectBarItem Text="Kabul Et" Value="GenericConstantDefinitions.Accepted" @onclick="() => ProductTransfer(GenericConstantDefinitions.Accepted)" />
                                                    <RadzenSelectBarItem Text="Reddet" Value="GenericConstantDefinitions.Rejected" @onclick="() => ProductTransfer(GenericConstantDefinitions.Rejected)" />
                                                    <RadzenSelectBarItem Text="İade Et" Value="GenericConstantDefinitions.ReturnIt" @onclick="() => ProductTransfer(GenericConstantDefinitions.ReturnIt)" />
                                                }
                                                return;
                                            }
                                        </Items>
                                    </RadzenSelectBar>
                                }
                            }
                        </RadzenStack>
                    }

                    <hr />

                    @if (AuthorizationService!.HasPermission("res:filetransfer", "scopes:read"))
                    {
                        if (productDetails?.data?.FirstOrDefault()?.AssignedProducts?.Any() == true)
                        {
                            var assignedUserName = productDetails.data.FirstOrDefault()?.AssignedProducts?.FirstOrDefault()?.AssignedUserName;

                            if (!string.IsNullOrEmpty(assignedUserName))
                            {
                                <RadzenCard Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1" id="fileManager">
                                    <CascadingValue Value="true" Name="ShowDeleteButtonForFileManager">
                                        <CascadingValue Value="true" Name="ShowUploadAreaForFileManager">
                                            <RadzenLabel><strong>Formun yükleneceği Klasör : </strong></RadzenLabel>
                                            <CascadingValue Value="true" Name="ExcludeHistoryFilesForFileManager">
                                                <InventoryManagement.Frontend.Pages.FileManager.FileManager @ref="fileManagerRef" />
                                            </CascadingValue>
                                        </CascadingValue>
                                    </CascadingValue>
                                </RadzenCard>
                            }
                        }
                    }
                </RadzenCard>
            </div>
        </RadzenColumn>
    }
</RadzenRow>
<br />

<RadzenRow style="height: auto">
    <div class="rz-shadow-5 rz-border-radius-2 h-100" style="width: 100%;">
        <DxFormLayout CssClass="w-100">
            <DxFormLayoutTabPages>
                <DxFormLayoutTabPage Caption="Ürün Hareketleri">
                    <DxGrid SizeMode="SizeMode.Small"
                            ColumnResizeMode="GridColumnResizeMode.NextColumn"
                            Data="productDetails?.data?.FirstOrDefault()?.ProductMovements">
                        <Columns>
                            <DxGridDataColumn FieldName="@nameof(ProductMovementQueryDto.Description)" Caption="Açıklama" MinWidth="100" />
                            <DxGridDataColumn FieldName="@nameof(ProductMovementQueryDto.ProductId)" Caption="Ürün Numarası" Width="120" />
                            <DxGridDataColumn FieldName="@nameof(ProductMovementQueryDto.MovementDate)" Caption="Hareket Tarihi" Width="150" />
                            <DxGridDataColumn FieldName="@nameof(ProductMovementQueryDto.CreatedBy)" Caption="İşlemi Yapan" Width="200" />
                        </Columns>
                    </DxGrid>
                </DxFormLayoutTabPage>

                <DxFormLayoutTabPage Caption="Geçmiş Formlar">
                    @if (AuthorizationService.HasPermission("res:filetransfer", "scopes:read"))
                    {
                        <CascadingValue Value="false" Name="ShowDeleteButtonForFileManager">
                            <CascadingValue Value="false" Name="ShowUploadAreaForFileManager">
                                <CascadingValue Value="false" Name="ExcludeHistoryFilesForFileManager">
                                    <InventoryManagement.Frontend.Pages.FileManager.FileManager />
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    }
                </DxFormLayoutTabPage>
            </DxFormLayoutTabPages>
        </DxFormLayout>
    </div>
</RadzenRow>




@if (ShowUsersVisible)
{
    <DxPopup HeaderText="Ürün Zimmeti"
             AllowDrag="true"
             @bind-Visible="@ShowUsersVisible">
        <InventoryManagement.Frontend.Pages.Keycloak.UserPage />
        <hr />
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="Radzen.JustifyContent.End" Gap="0">
            <RadzenButton Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Danger" class="rz-text-secondary-color" Text="Kapat" Click="@(() => {  Console.WriteLine("d"); })" />
            <RadzenButton Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Success" Text="Zimmetle" Click="@(() => { Task.Run(() => AssignedProduct()); ShowUsersVisible=false; })" />
        </RadzenStack>
    </DxPopup>
}


@if (ShowGetStoreVisible)
{
    <DxPopup HeaderText="Depoya Al"
             AllowDrag="true"
             @bind-Visible="@ShowGetStoreVisible">
        <RadzenStack Gap="1.5rem">
            <p>Depoya alınacak ürün <b></b>@SelectedProduct?.Barcode - @SelectedProduct?.Name</p>
            <hr />
            <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.End">
                    <RadzenButton Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Danger" class="rz-text-secondary-color" Text="Kapat" Click="@(() => {  Console.WriteLine("d"); })" />
                    <RadzenButton Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Success" Text="Depoya Al" Click="@(() => { Task.Run(() => ProductGetStore()); ShowGetStoreVisible=false; })" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
    </DxPopup>
}


@if (ShowTransferListVisible)
{
    <DxPopup HeaderText="Transfer Listesi"
             AllowDrag="true"
             MinWidth="35%"
             MinHeight="30%"
             @bind-Visible="@ShowTransferListVisible">
        <RadzenStack Gap="1.5rem">
            <DxGrid Data="productOfficierList?.data"
                    AllowSelectRowByClick="true"
                    SizeMode="SizeMode.Small"
                    PageSize="25"
                    ColumnResizeMode="GridColumnResizeMode.NextColumn">
                <Columns>
                    <DxGridDataColumn FieldName=@nameof(TransferOfficierDto.Id) Caption="Id" Visible="false" />
                    <DxGridDataColumn FieldName=@nameof(TransferOfficierDto.UserName) Caption="Kullanıcı Adı" MinWidth="150" />
                    <DxGridDataColumn FieldName=@nameof(TransferOfficierDto.FullName) Caption="Adı Soyadı" MinWidth="200" />
                    <DxGridDataColumn FieldName=@nameof(TransferOfficierDto.Email) Caption="Email" MinWidth="200" />
                    <DxGridDataColumn FieldName=@nameof(TransferOfficierDto.CompanyId) Caption="Şirket Kodu" Visible="false" />
                    <DxGridCommandColumn Width="150px" ClearFilterButtonVisible="false" NewButtonVisible="false">
                        <CellDisplayTemplate>
                            @{
                                <DxButton Click="() => ProductTransfer((TransferOfficierDto)context.DataItem)" Text="Transfer Et" />
                            }
                        </CellDisplayTemplate>
                    </DxGridCommandColumn>
                </Columns>
            </DxGrid>
        </RadzenStack>
    </DxPopup>
}




@if (ShowAssignedFormVisible)
{
    ReportSet();
    <DxPopup HeaderText="Zimmet Formu"
             AllowDrag="true"
             Width="75%"
             MinWidth="300px"
             MaxWidth="600px"
             @bind-Visible="@ShowAssignedFormVisible">
        <DxReportViewer @ref="@_reportViewer" Report="@_report"  SizeMode="SizeMode.Small" />
    </DxPopup>
}
